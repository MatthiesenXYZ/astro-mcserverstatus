---
import { getServerPlayers, getServerStatus, type PlayerHeadType } from 'astro-mcserverstatus:components/api';
import stoneBrick from './assets/stone-brick.png';
import stone from './assets/stone.png';
import dirt from './assets/dirt.png';
import planks from './assets/planks-oak.png';
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import config from 'virtual:astro-mcserverstatus/config';


type Props = {
    host?: string;
    port?: number;
    options?: {
        query: boolean;
    }
    apiUrl?: string;
    playerHeadType?: PlayerHeadType;
    background?: "stone" | "stoneBrick" | "dirt" | "planks" | ImageMetadata;
    loading?: "lazy" | "eager";
};

const { 
    host, 
    port, 
    options, 
    apiUrl, 
    loading, 
    playerHeadType = "head", 
    background 
} = Astro.props;

let backgroundToUse: ImageMetadata;

if (background === undefined) {
    backgroundToUse = stoneBrick;
} else if (typeof background === "string") {
    switch (background) {
        case "stone":
            backgroundToUse = stone;
            break;
        case "dirt":
            backgroundToUse = dirt;
            break;
        case "planks":
            backgroundToUse = planks;
            break;
        default:
            backgroundToUse = stoneBrick;
            break;
    }
} else {
    backgroundToUse = background;
}

const Options = {
    host: host || config.serverAddress,
    port: port || config.serverPort,
    options: options || config.javaOptions,
    apiUrl: apiUrl || config.selfHostedAPI
}
const Players = await getServerPlayers(Options, playerHeadType)
const Status = await getServerStatus(Options)
---

<div class="online-player-list" style={`--background-image: url(${backgroundToUse.src})`}>

    <div class="player-list-head">
    { Status.online ? (
        <>
            <span class="font-green">Online Players</span>
            { Players && (
                    <div class="player-count">
                        {Players.online > 0 ? ( <div class="font-green">{Players.online}</div> ) : ( <div class="no-players">0</div> ) }/<div class="font-max" >{Players.max}</div>
                    </div>
            ) }
        </>
    ) : (
        <span class="font-red">Server Offline</span>
    )} 

    </div>

    <div class="current-players">

        { Players && Players.list.map((player) => (
            <div class="player-list-item">
                <Image src={player.image} alt={player.alt} title={player.alt} height={32} width={32} loading={loading || "eager"}/>
                <Fragment set:html={player.name} />
            </div>
        )) }
    
        { Players?.online === 0 && (
            <div class="player-list-item">
                <span class="no-players">No Players Online</span>
            </div> 
        ) }

    </div>

</div>

<link href="https://fonts.cdnfonts.com/css/minecraft-4" rel="stylesheet">
<link href="https://fonts.cdnfonts.com/css/minecraftia" rel="stylesheet">


<style>
    .online-player-list {
        background: rgba(0, 0, 0, 0.5);
        background-image: var(--background-image);
        image-rendering: pixelated;
        background-repeat: repeat;
        background-blend-mode: darken;
        background-size: 3rem;
        display: flex;
        flex-direction: column;
        position: relative;
        object-fit: scale-down;
        font-family: 'Minecraftia', sans-serif;
        width: 20rem;
        height: fit-content;
        border-radius: 1rem;
        border-color: rgb(57, 76, 93);
        border-style: solid;
        border-size: 1rem;
        align-items: center;
        gap: 0.5rem;
        padding: 0.6rem;
        box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.75);
    }

    .player-list-head {
        font-size: 1.25rem;
        font-family: 'Minecraft', sans-serif;
        position: relative;
        width: 100%;
        align-items: center;
        height: 1.5rem;
        display: flex;
        padding: 0.5rem;
        color: rgb(255, 255, 255);
        text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.705);
        border-bottom: 2px;
        border-color: rgba(25, 25, 25, 0.866);
        border-bottom-style: solid;
    }

    .player-list-head span {
        position: absolute;
        left: calc(50% - 5rem);
    }

    .player-list-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.1rem;
        color: white;
        font-size: 1rem;
        text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.87);
    }

    .player-list-item img {
        display: inline;
        box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.801);
        background-color: rgba(0, 0, 0, 0.329);
        border-radius: 1rem;
        transition: ease-in-out 0.2s;
        border-radius: 50%;
    }

    .current-players {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        padding: 0.1rem;
        width: 100%;
        align-items: center;
    }

    .player-count {
        color: white;
        font-weight: bold;
        font-size: 1.25rem;
        position: absolute;
        text-shadow: 4px 4px 2px rgb(0, 0, 0);
        top: 0;
        right: 0.5rem;
        gap: 0.5rem;
        user-select: none;
    }

    .no-players {
        display: inline;
        color: #00f0e0;
    }

    .font-green {
        display: inline;
        color: #66ff66;
        text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.87);
    }

    .font-max {
        display: inline;
        color: #d7c751;
    }

    .font-red {
        display: inline;
        color: #ff0000;
        text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.87);
    }

</style>