---
import config from 'virtual:astro-mcserverstatus/config';
import { ServerMOTD, ServerAddress, ServerIcon } from 'astro-mcserverstatus:components';
import { getServerIcon, getServerStatus, getServerPlayers, type PlayerHeadType } from 'astro-mcserverstatus:components/api';
import stoneBrick from './assets/stone-brick.png';
import stone from './assets/stone.png';
import dirt from './assets/dirt.png';
import planks from './assets/planks-oak.png';
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

type Props = {
    host?: string;
    port?: number;
    options?: {
        query: boolean;
    }
    apiUrl?: string;
    playerHeadType?: PlayerHeadType;
    background?: "stone" | "stoneBrick" | "dirt" | "planks" | ImageMetadata;
    loading?: "lazy" | "eager";
};

const { 
    host, 
    port, 
    options, 
    apiUrl, 
    loading, 
    playerHeadType = "head", 
    background 
} = Astro.props;

let backgroundToUse: ImageMetadata;

if (background === undefined) {
    backgroundToUse = stoneBrick;
} else if (typeof background === "string") {
    switch (background) {
        case "stone":
            backgroundToUse = stone;
            break;
        case "dirt":
            backgroundToUse = dirt;
            break;
        case "planks":
            backgroundToUse = planks;
            break;
        default:
            backgroundToUse = stoneBrick;
            break;
    }
} else {
    backgroundToUse = background;
}

const Options = {
    host: host || config.serverAddress,
    port: port || config.serverPort,
    options: options || config.javaOptions,
    apiUrl: apiUrl || config.selfHostedAPI
}
const Players = await getServerPlayers(Options, playerHeadType)
const Icon = await getServerIcon({ host: Options.host, port: Options.port})
const Status = await getServerStatus(Options)

const howLongAgo = (date: Date) => {
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const seconds = Math.floor(diff / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    if (days > 0) return `${days} days ago`;
    if (hours > 0) return `${hours} hours ago`;
    if (minutes > 0) return `${minutes} minutes ago`;
    return `${seconds} seconds ago`;
}

const LastChecked = howLongAgo(new Date(Status.retrieved_at))

const displayAddress = `${Options.host}${Options.port ? `:${Options.port}` : ""}`
---

<div class="server-banner" style={`--background-image: url(${backgroundToUse.src})`}>

    <ServerIcon loading={loading}/>

    <div class="server-address">
        {Status.online ? <div class="font-green status-circle">⬤</div> : <div class="font-red status-circle">⬤</div>} <ServerAddress address={displayAddress}/>
    </div>

    { 
        Players && (
            <div class="player-list">
                Players: {Players.online > 0 ? ( <div class="font-green">{Players.online}</div> ) : ( <div class="no-players">0</div> ) }/<div class="font-max" >{Players.max}</div>
            </div>
        )
    }

    <ServerMOTD {...Options}/>

    {
        Players && Players.list && Players.list.length > 0 && (
            <div class="player-heads">
                {Players.list.slice(0, 10).map((player) => (
                    <Image src={player.image} alt={player.alt} title={player.alt} height={20} width={20} loading={loading || "eager"}/>
                ))}
            </div>
        )
    }

    <div class="last-checked">
        Last Checked: {LastChecked}
    </div>

</div>
<link href="https://fonts.cdnfonts.com/css/minecraft-4" rel="stylesheet">

<style>
    .server-banner {
        background: rgba(0, 0, 0, 0.5);
        background-image: var(--background-image);
        image-rendering: pixelated;
        background-repeat: repeat;
        background-blend-mode: darken;
        background-size: 3rem;
        display: flex;
        position: relative;
        object-fit: scale-down;
        font-family: 'Minecraft', sans-serif;
        width: 36rem;
        border-radius: 1rem;
        border-color: rgb(57, 76, 93);
        border-style: solid;
        border-size: 1rem;
        align-items: center;
        gap: 0.5rem;
        padding: 0.6rem;
        box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.75);
    }

    .server-address {
        color: white;
        font-size: large;
        font-weight: bold;
        display: inline;
        flex-direction: row;
        position: absolute;
        top: 0.1rem;
        left: 5rem;
        gap: 0.5rem;
        user-select: none;
    }

    .player-list {
        color: white;
        font-weight: bold;
        display: inline;
        flex-direction: row;
        text-shadow: 4px 4px 2px rgb(0, 0, 0);
        position: absolute;
        top: 0.1rem;
        right: 1rem;
        gap: 0.5rem;
        user-select: none;
    }

    .player-heads {
        display: inline;
        position: absolute;
        bottom: 0.1rem;
        left: 6rem;
        gap: 0.5rem;
        user-select: none;
    }

    .player-heads img {
        display: inline;
        box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.801);
        background-color: rgba(0, 0, 0, 0.329);
        border-radius: 1rem;
        transition: ease-in-out 0.2s;
    }

    .player-heads img:hover {
        scale: 1.4;
        transition: ease-in-out 0.2s;
    }

    .last-checked {
        color: rgb(164, 164, 164);
        font-size: small;
        display: inline;
        flex-direction: row;
        text-shadow: 4px 4px 2px rgb(0, 0, 0);
        position: absolute;
        bottom: 0.2rem;
        right: 1rem;
        gap: 0.5rem;
        user-select: none;
    }

    .status-circle {
        border-style: outset;
        border-color: rgba(0, 0, 0, 0.5);
        text-shadow: 4px 4px 2px rgb(0, 0, 0);
        border-radius: 2rem;
        user-select: none;
    }

    .no-players {
        display: inline;
        color: #00f0e0;
    }

    .font-green {
        display: inline;
        color: #00d300;
    }

    .font-max {
        display: inline;
        color: #d7c751;
    }

    .font-red {
        display: inline;
        color: #ff0000;
    }
</style>
